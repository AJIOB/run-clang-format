#!/usr/bin/env python
"""A wrapper script around clang-format, suitable for linting multiple files
and to use for continuous integration.

This is just an alternative API for the command line, it produces a diff,
and it returns a sensible exit code.

"""

import argparse
import difflib
import multiprocessing
import os
import subprocess
import signal
import sys

DEFAULT_EXTENSIONS = 'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'


def list_files(files, recursive=False, extensions=None):
    out = []
    for file in files:
        if recursive and os.path.isdir(file):
            for dirpath, dnames, fnames in os.walk(file):
                for f in fnames:
                    ext = os.path.splitext(f)[1][1:]
                    if ext in (extensions or []):
                        out.append(os.path.join(dirpath, f))
        else:
            out.append(file)
    return out


def make_diff(file, original, reformatted):
    return list(
        difflib.diff_bytes(
            difflib.unified_diff,
            original,
            reformatted,
            fromfile='{}\t(original)'.format(file).encode('utf-8'),
            tofile='{}\t(reformatted)'.format(file).encode('utf-8'),
            n=3))


def run_clang_format_diff(param_pack):
    args, file = param_pack
    invocation = [args.clang_format_executable, file]
    proc = subprocess.Popen(invocation, stdout=subprocess.PIPE)
    reformatted = proc.stdout.readlines()
    proc.wait()
    if proc.returncode:
        return None
    with open(file, "rb") as f:
        original = f.readlines()
    return make_diff(file, original, reformatted)


def colorize(diff_lines):
    def bold(s):
        return b'\x1b[1m' + s + b'\x1b[0m'

    def cyan(s):
        return b'\x1b[36m' + s + b'\x1b[0m'

    def green(s):
        return b'\x1b[32m' + s + b'\x1b[0m'

    def red(s):
        return b'\x1b[31m' + s + b'\x1b[0m'

    for line in diff_lines:
        if line[:4] in [b'--- ', b'+++ ']:
            yield bold(line)
        elif line.startswith(b'@@ '):
            yield cyan(line)
        elif line.startswith(b'+'):
            yield green(line)
        elif line.startswith(b'-'):
            yield red(line)
        else:
            yield line


def print_diff(diff_lines, use_color):
    if use_color:
        diff_lines = colorize(diff_lines)
    for line in diff_lines:
        sys.stdout.write(line.decode('utf-8'))


def main():
    parser = argparse.ArgumentParser(
        description='Run clang-format and produce diff of the output.')
    parser.add_argument(
        '--clang-format-executable',
        help='path to the clang-format executable',
        default='clang-format')
    parser.add_argument(
        '--extensions',
        help='comma separated list of file extensions',
        default=DEFAULT_EXTENSIONS)
    parser.add_argument(
        '-r',
        '--recursive',
        action='store_true',
        help='run recursively over directories')
    parser.add_argument('files', metavar='file', nargs='+')
    parser.add_argument(
        '-j',
        metavar='N',
        type=int,
        default=0,
        help='run N clang-format jobs in parallel'
        ' (default number of cpus + 1)')
    parser.add_argument(
        '--color',
        default='auto',
        choices=['auto', 'always', 'never'],
        help='show colored diff (default: auto)')

    args = parser.parse_args()

    # use default signal handling, like diff return SIGINT value on ^C
    # https://bugs.python.org/issue14229#msg156446
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    max_task = args.j
    if max_task == 0:
        max_task = multiprocessing.cpu_count() + 1

    pool = multiprocessing.Pool(max_task)

    colored = None
    retcode = 0
    files = list_files(
        args.files,
        recursive=args.recursive,
        extensions=args.extensions.split(','))
    for diff in pool.imap(run_clang_format_diff,
                          zip([args] * len(files), files)):
        if diff == []:
            continue
        if colored is None:
            if args.color == 'always':
                colored = True
            elif args.color == 'auto':
                colored = sys.stdout.isatty()
        print_diff(diff or [], use_color=colored)
        retcode = 1

    sys.exit(retcode)


if __name__ == '__main__':
    main()
